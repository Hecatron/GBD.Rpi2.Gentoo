# HG changeset patch
# User JoÃ£o Matos <joao@tritao.eu>
# Date 1405952526 -3600
# Branch http
# Node ID a63debbea0941d3f4db5a3f8a03362b8aa9c11b3
# Parent  948699115bec2ebf5606cddfd3e23771286ef09a
Added initial HTTP support to Premake.

There are two initial APIs:

  http.get() which performs a GET HTTP request and returns its response as a string
  http.download() which performs a GET HTTP request and saves the response to a file

diff --git a/premake5.lua b/premake5.lua
--- a/premake5.lua
+++ b/premake5.lua
@@ -10,6 +10,8 @@
 
 	premake.api.deprecations "off"
 
+	local ENABLE_HTTP = true
+
 --
 -- Define the project. Put the release configuration first so it will be the
 -- default when folks build using the makefile. That way they don't have to
@@ -25,12 +27,17 @@
 		language    "C"
 		kind        "ConsoleApp"
 		flags       { "No64BitChecks", "ExtraWarnings", "StaticRuntime" }
-		includedirs { "src/host/lua-5.1.4/src" }
+
+		includedirs
+		{
+			"src/host/lua-5.1.4/src",
+		}
 
 		files
 		{
 			"*.txt", "**.lua",
-			"src/**.h", "src/**.c",
+			"src/host/*.h", "src/host/*.c",
+			"src/host/lua-5.1.4/**.h", "src/host/lua-5.1.4/**.c",
 			"src/host/scripts.c"
 		}
 
@@ -43,6 +50,23 @@
 			"src/host/lua-5.1.4/etc/*.c"
 		}
 
+		if ENABLE_HTTP then
+			includedirs
+			{
+				"src/host/curl/include",
+			}
+
+			files
+			{
+				"src/host/curl/lib/**.c",
+				"src/host/curl/lib/**.h"
+			}
+
+			defines { "CURL_STATICLIB", "BUILDING_LIBCURL", "HTTP_ONLY" }
+
+
+		end
+
 		configuration "Debug"
 			targetdir   "bin/debug"
 			defines     "_DEBUG"
@@ -61,6 +85,9 @@
 
 		configuration "windows"
 			links { "ole32" }
+			if ENABLE_HTTP then
+				links { "Ws2_32" }
+			end
 
 		configuration "linux or bsd or hurd"
 			defines     { "LUA_USE_POSIX", "LUA_USE_DLOPEN" }
diff --git a/src/host/http.c b/src/host/http.c
new file mode 100644
--- /dev/null
+++ b/src/host/http.c
@@ -0,0 +1,192 @@
+/**
+ * \file   http.c
+ * \brief  HTTP requests support using libcurl.
+ * \author Copyright (c) 2014 João Matos and the Premake project
+ */
+
+#include "premake.h"
+#include "stdlib.h"
+
+#ifdef HTTP_ONLY
+
+#include <curl/curl.h>
+
+typedef struct {
+  char* ptr;
+  size_t len;
+} string;
+
+void string_init(string* s) {
+  s->len = 0;
+  s->ptr = (char*) malloc(s->len+1);
+  if (s->ptr == NULL) {
+    fprintf(stderr, "malloc() failed\n");
+    exit(EXIT_FAILURE);
+  }
+  s->ptr[0] = '\0';
+}
+
+typedef struct
+{
+	lua_State* L;
+	int RefIndex;
+	string S;
+} CurlCallbackState;
+
+int curl_progress_cb(void* userdata, double dltotal, double dlnow,
+                     double ultotal, double ulnow)
+{
+	CurlCallbackState* state = (CurlCallbackState*) userdata;
+	lua_State* L = state->L;
+
+	(void)ultotal;
+	(void)ulnow;
+
+	if (dltotal == 0) return 0;
+
+	/* retrieve the lua progress callback we saved before */
+	lua_rawgeti(L, LUA_REGISTRYINDEX, state->RefIndex);
+	lua_pushnumber(L, dltotal);
+	lua_pushnumber(L, dlnow);
+	lua_pcall(L, 2, LUA_MULTRET, 0);
+
+	return 0;
+}
+
+size_t curl_write_cb(char *ptr, size_t size, size_t nmemb, void *userdata)
+{
+	CurlCallbackState* state = (CurlCallbackState*) userdata;
+	string* s = &state->S;
+
+	size_t new_len = s->len + size * nmemb;
+	s->ptr = (char*) realloc(s->ptr, new_len+1);
+
+	if (s->ptr == NULL)
+	{
+		fprintf(stderr, "realloc() failed\n");
+		exit(EXIT_FAILURE);
+	}
+
+	memcpy(s->ptr+s->len, ptr, size * nmemb);
+	s->ptr[new_len] = '\0';
+	s->len = new_len;
+
+	return size * nmemb;
+}
+
+static void curl_init()
+{
+	static int initializedHTTP = 0;
+
+	if (initializedHTTP)
+		return;
+
+	curl_global_init(CURL_GLOBAL_WIN32);
+	atexit(curl_global_cleanup);
+	initializedHTTP = 1;
+}
+
+CURL * curl_request(lua_State* L, CurlCallbackState* state)
+{
+	CURL* curl;
+	const char* url = luaL_checkstring(L, 1);
+
+	/* if the first argument is not an url, then we early exit */
+	if (!url)
+		return NULL;
+
+	/* if the second argument is a lua function, then we save it
+		to call it later as the http progress callback */
+	if (lua_type(L, 2) == LUA_TFUNCTION)
+	{
+		state->L = L;
+		state->RefIndex = luaL_ref(L, LUA_REGISTRYINDEX);
+	}
+
+	curl_init();
+	curl = curl_easy_init();
+
+	if (!curl)
+		return NULL;
+
+	curl_easy_setopt(curl, CURLOPT_URL, url);
+	curl_easy_setopt(curl, CURLOPT_HTTPGET, 1);
+	curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1);
+	curl_easy_setopt(curl, CURLOPT_NOPROGRESS, 1);
+
+	curl_easy_setopt(curl, CURLOPT_WRITEDATA, state);
+	curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, curl_write_cb);
+
+	if (state->L != 0)
+	{
+		curl_easy_setopt(curl, CURLOPT_NOPROGRESS, 0);
+		curl_easy_setopt(curl, CURLOPT_PROGRESSDATA, state);
+		curl_easy_setopt(curl, CURLOPT_PROGRESSFUNCTION, curl_progress_cb);
+	}
+
+	return curl;
+}
+
+int http_get(lua_State* L)
+{
+	CurlCallbackState state = { 0, 0 };
+	CURL* curl = curl_request(L, &state);
+
+	CURLcode code;
+	const char* err;
+
+	string_init(&state.S);
+
+	if (!curl)
+	{
+		lua_pushnil(L);
+		return 1;
+	}
+
+	code = curl_easy_perform(curl);
+	if (code != CURLE_OK)
+	{
+		err = curl_easy_strerror(code);
+
+		lua_pushnil(L);
+		lua_pushfstring(L, err);
+		return 2;
+	}
+
+	curl_easy_cleanup(curl);
+
+	lua_pushlstring(L, state.S.ptr, state.S.len);
+	return 1;
+}
+
+int http_download(lua_State* L)
+{
+	CurlCallbackState state = { 0, 0 };
+	CURL* curl = curl_request(L, &state);
+
+	CURLcode code;
+	const char* err;
+
+	if (!curl)
+	{
+		lua_pushnil(L);
+		return 1;
+	}
+
+	code = curl_easy_perform(curl);
+	if (code != CURLE_OK)
+	{
+		err = curl_easy_strerror(code);
+
+		lua_pushnil(L);
+		lua_pushfstring(L, err);
+		return 2;
+	}
+
+	curl_easy_cleanup(curl);
+
+	lua_pushboolean(L, 0);
+	return 1;
+}
+
+#endif
\ No newline at end of file
diff --git a/src/host/premake.c b/src/host/premake.c
--- a/src/host/premake.c
+++ b/src/host/premake.c
@@ -88,6 +88,11 @@
 	{ NULL, NULL }
 };
 
+static const luaL_Reg http_functions[] = {
+	{ "get",  http_get },
+	{ "download",  http_download },
+	{ NULL, NULL }
+};
 
 /**
  * Initialize the Premake Lua environment.
@@ -99,6 +104,7 @@
 	luaL_register(L, "path",     path_functions);
 	luaL_register(L, "os",       os_functions);
 	luaL_register(L, "string",   string_functions);
+	luaL_register(L, "http",     http_functions);
 
 	/* push the application metadata */
 	lua_pushstring(L, LUA_COPYRIGHT);
diff --git a/src/host/premake.h b/src/host/premake.h
--- a/src/host/premake.h
+++ b/src/host/premake.h
@@ -104,6 +104,9 @@
 int string_endswith(lua_State* L);
 int string_hash(lua_State* L);
 int string_startswith(lua_State* L);
+int http_get(lua_State* L);
+int http_download(lua_State* L);
+
 
 /* Engine interface */
 int premake_init(lua_State* L);
