# HG changeset patch
# User JoÃ£o Matos <joao@tritao.eu>
# Date 1406482999 -3600
# Branch http
# Node ID 460a6580b6ac2ca58e301026037be7082751b63f
# Parent  fcbd2cccd55563c039de4f111fa08440e3b80665
Cleaned up HTTP support.

- The build now uses the native SSL platforms for each platform.
- http.download will now correctly download to a file.

diff --git a/premake5.lua b/premake5.lua
--- a/premake5.lua
+++ b/premake5.lua
@@ -12,6 +12,53 @@
 
 	local ENABLE_HTTP = true
 
+	function SetupCURL()
+		includedirs
+		{
+			"src/host/curl/include",
+			"src/host/curl/lib",
+		}
+
+		files
+		{
+			"src/host/curl/lib/**.c",
+			"src/host/curl/lib/**.h",
+		}
+
+		defines
+		{
+			"CURL_STATICLIB",
+			"BUILDING_LIBCURL",
+			"HTTP_ONLY",
+		}
+
+		configuration "windows"
+			defines { "USE_SCHANNEL", "USE_WINDOWS_SSPI" }
+			links { "Ws2_32" }
+
+		configuration "not windows"
+			defines { "HAVE_CONFIG_H" }
+
+		local ssl = os.is("macosx") and "--with-darwinssl" or "--with-openssl"
+		prebuildcommands 
+		{
+			'sh -c "if [ ! -f ./src/host/curl/config.status ]; then '
+				.. "cd ./src/host/curl && ./configure " .. ssl
+				.. " --disable-ftp --disable-file"
+				.. " --disable-ldap --disable-ldaps --disable-rtsp --disable-dict"
+				.. " --disable-telnet --disable-tftp --disable-pop3 --disable-imap"
+				.. ' --disable-smtp --disable-gopher; fi"'
+		}
+
+		configuration "macosx"
+			defines { "USE_DARWINSSL" }
+			links { "Security.framework", "z" }
+
+		configuration { "not windows", "not macosx" }
+			defines { "USE_SSLEAY", "USE_OPENSSL" }
+			links { "ssl", "crypto", "z" }
+	end
+
 --
 -- Define the project. Put the release configuration first so it will be the
 -- default when folks build using the makefile. That way they don't have to
@@ -51,20 +98,7 @@
 		}
 
 		if ENABLE_HTTP then
-			includedirs
-			{
-				"src/host/curl/include",
-			}
-
-			files
-			{
-				"src/host/curl/lib/**.c",
-				"src/host/curl/lib/**.h"
-			}
-
-			defines { "CURL_STATICLIB", "BUILDING_LIBCURL", "HTTP_ONLY" }
-
-
+			SetupCURL()
 		end
 
 		configuration "Debug"
@@ -85,9 +119,6 @@
 
 		configuration "windows"
 			links { "ole32" }
-			if ENABLE_HTTP then
-				links { "Ws2_32" }
-			end
 
 		configuration "linux or bsd or hurd"
 			defines     { "LUA_USE_POSIX", "LUA_USE_DLOPEN" }
diff --git a/src/host/http.c b/src/host/http.c
--- a/src/host/http.c
+++ b/src/host/http.c
@@ -31,6 +31,7 @@
 	lua_State* L;
 	int RefIndex;
 	string S;
+	const char* File;
 } CurlCallbackState;
 
 int curl_progress_cb(void* userdata, double dltotal, double dlnow,
@@ -81,23 +82,19 @@
 	if (initializedHTTP)
 		return;
 
-	curl_global_init(CURL_GLOBAL_WIN32);
+	curl_global_init(CURL_GLOBAL_ALL);
 	atexit(curl_global_cleanup);
 	initializedHTTP = 1;
 }
 
-CURL * curl_request(lua_State* L, CurlCallbackState* state)
+CURL * curl_request(lua_State* L, CurlCallbackState* state, FILE* fp, int progressFnIndex)
 {
 	CURL* curl;
 	const char* url = luaL_checkstring(L, 1);
 
-	/* if the first argument is not an url, then we early exit */
-	if (!url)
-		return NULL;
-
 	/* if the second argument is a lua function, then we save it
 		to call it later as the http progress callback */
-	if (lua_type(L, 2) == LUA_TFUNCTION)
+	if (lua_type(L, progressFnIndex) == LUA_TFUNCTION)
 	{
 		state->L = L;
 		state->RefIndex = luaL_ref(L, LUA_REGISTRYINDEX);
@@ -117,6 +114,12 @@
 	curl_easy_setopt(curl, CURLOPT_WRITEDATA, state);
 	curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, curl_write_cb);
 
+	if (fp)
+	{
+		curl_easy_setopt(curl, CURLOPT_WRITEDATA, fp);
+		curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, NULL);
+	}
+
 	if (state->L != 0)
 	{
 		curl_easy_setopt(curl, CURLOPT_NOPROGRESS, 0);
@@ -130,9 +133,10 @@
 int http_get(lua_State* L)
 {
 	CurlCallbackState state = { 0, 0 };
-	CURL* curl = curl_request(L, &state);
 
+	CURL* curl = curl_request(L, &state, /*fp=*/NULL, /*progressFnIndex=*/2);
 	CURLcode code;
+
 	const char* err;
 
 	string_init(&state.S);
@@ -162,11 +166,25 @@
 int http_download(lua_State* L)
 {
 	CurlCallbackState state = { 0, 0 };
-	CURL* curl = curl_request(L, &state);
 
+	CURL* curl;
 	CURLcode code;
+
 	const char* err;
 
+	FILE* fp;
+	const char* file = luaL_checkstring(L, 2);
+
+	fp = fopen(file, "wb");
+	if (!fp)
+	{
+		lua_pushnil(L);
+		lua_pushfstring(L, "could not open file");
+		return 2;
+	}
+
+	curl = curl_request(L, &state, fp, /*progressFnIndex=*/3);
+
 	if (!curl)
 	{
 		lua_pushnil(L);
@@ -185,8 +203,7 @@
 
 	curl_easy_cleanup(curl);
 
-	lua_pushboolean(L, 0);
-	return 1;
+	return 0;
 }
 
 #endif
\ No newline at end of file
