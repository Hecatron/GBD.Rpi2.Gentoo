--- rpimonitor/template/gentoo.conf	2015-01-06 17:49:46.000000000 +0000
+++ rpimonitor/template/gentoo.conf	2015-03-14 15:40:02.279612000 +0000
@@ -1,267 +1,260 @@
 ########################################################################
 #
-# KPI extraction configuration
+# Data extraction configuration
 # 
-#  This part of the configuration file is defining which data to
-#  extract how to extract them and when.
+#  This configuration file defines how and when data should be
+#  extracted.
 # 
-#  Specific 'include' keyword is available to add a file at the end of 
-#  the list of configuration files to be loaded. 
+#  The 'include' keyword can be used to append additional configuration
+#  files to the list to be processed:
 # 
 #  include=<full path to configuration file>
-#    <full path to configuration file> is the full path to the 
-#    configuration file to add at the end of the list of configuration 
-#    files to be loaded.
-# 
-#  Static KPI are extracted once at rpimonitord startup. Each statistic
-#  is identified into the conf file by a line stating with the keyword
-#  static and an identifier <static data id>
 # 
-#  Each static KPI is defined by an id and with 4 parameters
+#  Static items are extracted once on rpimonitord startup. Each
+#  statistic is specified below by a line starting with the keyword
+#  'static' and followed by a numerical unique identifier.
+# 
+#  Each static item has four further parameters:
 # 
 #  static.<static data id>.name=<data name>
-#    <data name> is a string representing the KPI or the list of KPI
-#    separated by comma. Each name has to be unique.
-#    Only alpha numerical charter and underscore are accepted.
-# 
-#  static.<static data id>.source=<data source>
-#    <data source> is a file or an executable file within the path.
-#    If the file exists, rpimonitord will read its content. If the file
-#    is not existing, rpimonirotd will try to execute it and will parse
-#    the output.
+#    <data name> is the string represention the item (or comma-separated
+#    items) being defined.  Each name must be unique.
+#    Only alpha-numeric charaters and underscores are valid in item
+#    names.
+# 
+#  static.<static data id>.source=<data source>[,<data source,...]
+#    <data source> may be a file or an executable from which content
+#    can be read.  If a full path is not provided, rpimonitord will
+#    first attempt to read from a file with the specified name and,
+#    failing this, will attempt to execute a binary of the same name
+#    within any directory specified in the contents of the PATH
+#    vaiable.
 #    Warning: specifying an executable by its absolute name will tell
-#    rpimonitord to read the content of the executable.1.graph.
+#    rpimonitord to read the content of <executable>.1.graph.
 # 
-#  static.<static data id>.regexp=<data regexp>
-#    <data regexp> is the regular expression extracting information from
-#    data source. Regexp groups () has to be used to extract the data
-#    In case of KPI list, each group will be affected to a KPI name.
+#  static.<static data id>.regexp=<data regex>
+#    <data regex> is an optional regular expression which may be
+#    applied to extract information from the designated source value,
+#    as above.  Data matching a Perl-Compatible/Extended Regular
+#    Expression group (e.g. matches within round-brackets) will be
+#    selected to represent this <data source>.
+#    Where a list of <data source>s is defined, each sequential group
+#    match will be assigned to each <data source> in turn.
 # 
 #  static.<static data id>.postprocess=<data postprocess>
-#    <data postprocess> is an expression defining the postprocessing to
-#    be applied on result. KPI are idendified by $1. In case of list,
-#    other KPI are identified by $2, $3 .graph..
-#    This parameter will be evaluate by the command eval of perl.
-# 
-#  Dynamic KPI are extracted periodically (defined by daemon.delay)
-#  Each statistic is identified into the conf file by a line stating
-#  with the keyword dynamic and an identifier <dynamic data id>
-# 
-#  Each dynamic KPI is defined by an id and with 5 parameters
+#    <data postprocess> is an optional expression specifying any
+#    postprocessing which should be applied to the raw <data source>, or
+#    the <data regex> output if defined.
+#    The first <data source> is referenced as '$1', with further <data
+#    source>s in a list being referred to as '$2', '$3', etc.
+#    The expression will be evaluated via the Perl 'eval' command.
+# 
+#  Dynamic items are periodically evaluated with an interval specified
+#  by 'daemon.delay' in /etc/rpimonitord.conf.  Each statistic is
+#  defined by the 'dynamic' keyword followed by a <dynamic data id>
+#  identifier and five further parameters:
 # 
-#  dynamic.<dynamic data id>.name=<data name>
+#  dynamic.<dynamic data id>.name=<data name>[,<data name>,...]
 #  dynamic.<dynamic data id>.source=<data source>
-#  dynamic.<dynamic data id>.regexp=<data regexp>
+#  dynamic.<dynamic data id>.regexp=<data regex>
 #  dynamic.<dynamic data id>.postprocess=<data postprocess>
-#    <data name>, <data source>, <data regexp>, <data postprocess>
-#    This 4 first parameters have the same signification as for static
-#    parameters.
-# 
-#  dynamic.<dynamic data id>.rrd=<|GAUGE|COUNTER|DERIVE|ABSOLUTE|COMPUTE>
-#    The 5th parameter is defining if the KPI has to be stored into a RRD
-#    database and how <|GAUGE|COUNTER|DERIVE|ABSOLUTE|COMPUTE>. If the
-#    parameter is defined as empty, no RRD database will be created. If
-#    this parameter is defined, a RRD database will be created and data
-#    will be stored at every extraction.
-#    Ref http://oss.oetiker.ch/rrdtool/doc/rrdcreate.en.html for RRD
-#    parameter description.
-#  dynamic.<dynamic data id>.min=<minimal value acceptable in RRD>
-#  dynamic.<dynamic data id>.max=<miximal value acceptable in RRD>
-#    If a value extracted by is less than minimal of greater than maximal
-#    value, it will be stored int RRD database as unknown.
-#    These limits are usefull to handle counter that fall down to 0 when
-#    they reach their limit (Ex: network graphs)
-# 
-#  Note: Static values are accessible for the post processing using the
-#  variable $this->{'static'}->{'static_data_name'} and can be used.
-#  You can refer to swap data extraction to see an example.
+#    <data name>, <data source>, <data regex>, and <data postprocess> 
+#    have the same meanings as when used with static items.
+# 
+#  dynamic.<dynamic data id>.rrd=<GAUGE|COUNTER|DERIVE|ABSOLUTE|COMPUTE>
+#    The fifth parameter determines whether the item's data should be
+#    stored in an Round-Robin Database, and how it should be
+#    represented.  A blank entry will prevent RRD creation.
+#    See http://oss.oetiker.ch/rrdtool/doc/rrdcreate.en.html for
+#    details of the RRD different RRD options.
+#
+#  NB: Values associated with named static items are available for use
+#  during post-processing with the notation:
+#
+#    $this->{'static'}->{'static_data_name'}
+#
+#  See the dynamic item named 'swap_used' for a real-world example.
 #
 ########################################################################
 #
-# Web interface configuration
+# Web interface quick-links configuration
 # 
-#  Friends are defining a displayed name and a link reachable from a
-#  top left menu visible if at least one friends is configured. Each
-#  friend is identified by its <id> and is described by the 2 following
-#  parameters
+#  'friends' are links shown in the top-left menu, visible once at least
+#  one friend is configured.  Each friend is defined by a the keyword
+#  'web.friends' followed by a numerical unqiue identifier and each of
+#  two additional parameters:
 # 
 #  web.friends.<id>.name=<display name>
-#  web.friends.<id>.link=<link to RPi-Monitor>
-# 
-#  web.friends.<id>.name=<display name>
-#    <display name> is the name printed into the drop down menu
+#  web.friends.<id>.link=<URL>
+#
+#  'friends' are envisaged to provide an easy way to link multiple
+#  rpimonitord instances across different hosts.
 # 
-#  web.friends.<id>.link=<link to RPi-Monitor>
-#    <link to RPi-Monitor> is the link to another RPi-Monitor running
-#    into the friend machine.
+# Web interface configuration
 # 
 #  web.page.icon=<icon location relative to webroot>
-#    <icon location relative to webroot> is the path and filename of
-#    the icon to be displayed into RPi-Monitor title bar
+#    <icon location relative to webroot> is the URI of the icon to be
+#    displayed in the browser address bar.
+# 
+#  web.page.menutitle=<menu title js>
+#    <menu title js> is javascript code used to populate the rpimonitord
+#    title-bar.
+#    Metrics in the 'data' object such as 'data.hostname' may be
+#    referenced.
+# 
+#  web.page.pagetitle=<page title js>
+#    <page title js> is javascript code used to populate the rpimonitord
+#    website title, as shown by the browser window/tab.
+#    Metrics in the 'data' object such as 'data.hostname' may be
+#    referenced.
 # 
-#  web.page.menutitle=<menu title>
-#    <menu title> javascript code defining the text displayed into 
-#    RPi-Monotor title bar. This code can use status information with
-#    the keyword 'data' including the 'data.hostname' available natively
-# 
-#  web.page.pagetitle=<page title>
-#    <page title> javascript code defining the text displayed into 
-#    tab and window title bar. This code can use status information with
-#    the keyword 'data' including the 'data.hostname' available natively
-# 
-#  The status page is fully configurable.
-#  It is possible to define multiple pages. Each page is identified by
-#  its <page id>.
+# Web interface status pages
+# 
+#  It is possible to define multiple status pages. Each page is
+#  identified by its <page id>:
 # 
 #  web.status.<page id>.name=<page name>
-#    <page name> name of the page displayed into the drop down menu in
-#    case of multiple pages.
+#    <page name> is the name of the page as displayed in the drop down
+#    menu which is shown when multiple pages are defined.
 # 
-#  Status page is split in strips displaying information. Each status
-#  strip is identified by a unique <status id>. Each status strip is
-#  defined by a name, an icon and a serie of lines described as follow:
-# 
-#  web.status.<page id>.visibility=<visibility formula>
-#
-#  <visibility forlula> should be a valid javascript formula returning
-#    0: to hide the row
-#    anything else but 0: show the row
+#  Each status page is split into horizontal rows.  Each status row is
+#  identified by a unique <status id>, and is given a name, an icon and
+#  a series of entries as follows:
+# 
+#  web.status.<page id>.visibility=<condition js>
+#    <conditoin js> is a javascript statement which will cause the row
+#    to be hidden if it evaluates to zero, or shown otherwise.
 #
 #  web.status.<page id>.content.<status id>.name=<display name>
+#    <display name> is the row title.
+# 
 #  web.status.<page id>.content.<status id>.icon=<display icon>
-#  web.status.<page id>.content.<status id>.line.<line number>=<parameter>
+#    <display icon> is the icon for the row.
+#
+#  web.status.<page id>.content.<status id>.line.<line>=<expression js>
+#    <line> represents the numerical position of the line within the
+#    row.  This number must be unique for a given row.
+#    <expression js> specifies the content of the line, and will be
+#    rendered by a javascript 'eval()' call.
+#    For ease of use, rpimonitord provides several functions which can
+#    be used within the provided expression:
+# 
+#      Uptime( seconds )
+#        Output the time <seconds> in the following format:
+#        XX year XX days XX hours XX minutes XX seconds
+# 
+#      Pad( value )
+#        Add a prefix '0' for any <value> less than 10;
+# 
+#      KMG( value, pre )
+#        Output <value> in units of "kilo", "mega", "giga", or "peta".
+#        <pre> specifies the magnitude of the output required, and
+#        should be 'k', 'M', 'G', or 'P';
+# 
+#      Percent( value, total )
+#        Output the ratio of <value> to <total> as a percentage;
+# 
+#      ProgressBar( value, total, warning, danger )
+#        Draw a progressbar representing the ratio of <value> compared
+#        to <total>:
+#
+#        [=========------------]
+#
+#        The default color of bar is blue, but will be rendered in
+#        orange if the ratio of <value> to <total> is greater than
+#        <warning> as a percentage, and red if above <danger>;
+# 
+#      JustGageBar( title, label, min, value, max, width, height,
+#                   levelColors, warning, critical )
+#        Draw a half-circular gauge:
+#          <title> - Text to render above the gauge;
+#          <label> - Text to render below the gauge;
+#          <min>   - Minimum gauge value;
+#          <value> - Quantity to be shown;
+#          <max>   - Maximum gauge value;
+#          <width>, <height> - Size of the gauge in pixels;
+#          <levelColors> - An array of [normal, warning, danger] colour
+#                    values in hexadecimal notation, defaulting to
+#                    [green, orange, red].  Default colours are stored
+#                    in the 'precentColors' array.
+#          <warning> - Gauge level as a percentage to render in the
+#                    second colour of <levelColors>;
+#          <critical> - Gauge level as a percentage to render in the
+#                    third colour of <levelColors>;
+#
+#      Plural( value )
+#        Output "s " if <value> is greater than one, or " " otherwise;
 # 
-#  web.status.<page id>.content.<status id>.name=<display name>
-#    <display name> Name displayed as title of the strip
+#      Clock( data.localtime )
+#        Display a clock with incrementing seconds.  Use only with
+#        'data.localtime' as an argument;
+# 
+#      Label( data, expression, text, level )
+#      Badge( data, expression, text, level )
+#        These functions will output a label or badge with a specified 
+#        background color if the provided expression evaluates to true:
+#          <data>  - Input to <expression>;
+#          <expression> - Evaluated against <data> to determine whether
+#                    to display label or badge;
+#          <text>  - Text to output;
+#          <level> - 'default' (grey),
+#                    'primary' (blue label/grey badge), 
+#                    'success' (green),
+#                    'info' (cyan),
+#                    'warning' (orange) 
+#                    'danger' (red);
+#
+#      InsertHTML( url )
+#        This function is used to insert raw HTML within a page.
+#        (See the 'Top3' example showing the process with highest cpu
+#        usage) ;
 # 
-#  web.status.<page id>.content.<status id>.icon=<display icon>
-#    <display icon> Icon of the strip
+#    The 'data' object is also available and contains all dynamic and
+#    static metrics explained above.
+#
+# Web interface statistics pages
 # 
-#  web.status.<page id>.content.<status id>.line.<line number>=<parameter>
-#    <line number> represent the position of the line within the strip.
-#    This number has to be unique within the strip.
-#    <parameter> is describing the content of the line. This parameter
-#    will be evaluated by the javascript command with the function
-#    eval() theirfore parameter should be valid javacript.
-#    To have  clean rendering, RPi-Monitor web interface provides some
-#    functions that could be used inside the parameter. The object data
-#    is also available and contains the result of dynamic and static
-#    extracted as described in the KPI extraction section.
-# 
-#    Functions provided by RPi-Monitor are the following:
-# 
-#       Uptime(uptime in sec)
-#         Print the uptime from seconds to the following format:
-#         XX year XX days XX hours XX minutes XX seconds
-# 
-#       Pad(value)
-#         Add a prefixed 0 for number smaller than 10
-# 
-#       KMG(value, pre)
-#         Print value in kilo, Mega, Giga, Peta.
-#         pre can be 'k', 'M', 'G' or 'P' depending on the value.
-# 
-#       Percent(value,total)
-#         Print percentage of value compared to total
-# 
-#       ProgressBar(value,total,warning, danger)
-#         Draw a progressbar representing the value compared to total.
-#         [=========------------]
-#         The default color of pregressbar is blue.
-#         If warning value is lower than critical, progressbar color will
-#         be orange if percentage is higher than warning value and red 
-#         if the percentage is higher than danger value
-#         If warning value is higher than critical, progressbar color will
-#         be orange if percentage is lower than warning value and red 
-#         if the percentage is lower than danger value
-# 
-#       JustGageBar(title, label,min, value, max, width, height, levelColors, warning, critical)
-#         Draw a half-circular gauge
-#         title       : Title of the gauge (located on to of the gauge)
-#         label       : Label of the gauge (located under the value)
-#         min         : min value of the gauge
-#         value       : value to be drawn
-#         max         : max value of the gauge
-#         width, height : size of the gauge
-#         levelColors : Array defining colors of each level [normal,warning,critical] 
-#                       (in Hex format), default: green, orange and red.
-#                       Default colors are available into the array 'percentColors'.
-#         warning     : Warning level (in %) used to define color (default: 33)
-#         critical    : Critical  level (in %) used to define color (default: 66)
-#
-#       Plural (value)
-#         Print 's ' if value > 1 or ' ' if not.
-# 
-#       Clock(data.localtime)
-#         This function is a little bit particular and should be written
-#         and should be written exactly as in the upper line. It will
-#         display on screen the current time and will simulate the
-#         seconds by incrementing them periodically.
-# 
-#       Label(data,formula, text, level)
-#       Badge(data,formula, text, level)
-#         This function will write a label/badge with a defined 
-#         background color if the formula return TRUE.
-#         data    : data to use with the formula
-#         formula : formula evaluated in regards to data to determine
-#                   if label/badge has to be printed
-#         text    : text to be displayed
-#         level   : 'default' (grey), 'primary' (blue label/grey badge), 
-#                   'success' (green), 'info' (cyan), 'warning' (orange) 
-#                   or 'danger' (red)
-#
-#       InsertHTML(url)
-#         This function is used to insert an HTML information inside
-#         a page. (Ref Top3 example showing top most process cpu usage) 
-# 
-#  The statistic page is fully configurable.
-#  It is possible to define multiple pages. Each page is identified by
-#  its <page id>.
+#  It is possible to define multiple statistics pages. Each page is
+#  identified by its <page id>:
 # 
 #  web.status.<page id>.name=<page name>
-#    <page name> name of the page displayed into the drop down menu in
-#    case of multiple pages.
+#    <page name> is the name of the page as displayed in the drop down
+#    menu which is shown when multiple pages are defined.
 # 
-#  The statistic page displays statistics graphs. The graphs are
-#  identified an unique <statistic id> and by the following parameters.
+#  Statistics page display graphs which are identified by a unique
+#  <statistic id> and accept the following parameters:
 # 
-#  web.statistics.<page id>.content.<statistic id>.name=<statistic name>
-#    <statistic name> is the name of the statistics displayed in the
-#    top left drop down list.
-# 
-#  web.statistics.<page id>.content.<statistic id>.graph.<rrd id>=<data name>
-#    <rrd id> is identifying the graph and is unique per <statistic id>
-#    <data name> is the name of the dynamic and static extracted as
-#    described in the KPI extraction section.
-# 
-#  web.statistics.<page id>.content.<statistic id>.ds_graph_options.<data name>.label=<label>
-#    <data name> same as the previous <data name>
-#    <label> Label to display in legends. It is possible to setup other parameters
-#    of ds_graph_options. Refer to the following web page for details:
-#    http://javascriptrrd.sourceforge.net/docs/javascriptrrd_v0.5.0/doc/lib/rrdFlot_js.html
+#  web.statistics.<page id>.content.<statistic id>.name=<display name>
+#    <display name> is text to show in the drop-down list of statistics.
 # 
+#  web.statistics.<page id>.content.<statistic id>.graph.<rrd id>=<name>
+#    <rrd id> is unique per <statistic id>,
+#    <name> is the name of the extracted static or dynamic value to
+#    further configure.
+# 
+#  web.statistics.<page id>.content.<statistic id>.ds_graph_options.<name>.label=<label>
+#    <name> should match a <name> value from .graph.<rrd id>.
+#    <label> is the display-name of the graph being configured.
+#
 #  web.statistics.<page id>.content.<statistic id>.graph_options.<parameter>=<value>
-#    <parameter> and <value> can be find into the same web page as previous
-#    parameter. This allow to customize the graph and axis.
+#    It is possible to specify further parameters of ds_graph_options,
+#    see the following link for details:
+#    http://javascriptrrd.sourceforge.net/docs/javascriptrrd_v0.5.0/doc/lib/rrdFlot_js.html
+#
+#  rpimonitord must be restarted when this file is updated.
 #
-#  Example file are available in the template directory (prefixed by 'example'). 
-#  To understand how a feature is behaving, you can include this example file
-#  using the 'include' directive. 
-#  These include directive are already written (commented) into the default
-#  configuration file: raspbian.conf
-#  When configuration files change, it is required to restart rpimonitor.
 #######################################################################
 
-#web.friends.1.name=Raspberry Pi
-#web.friends.1.link=http://192.168.0.123/
-#web.friends.2.name=Shuttle
+#web.friends.1.name=First Raspberry Pi
+#web.friends.1.link=http://192.168.0.1/
+#web.friends.2.name=Second Raspberry Pi
 #web.friends.2.link=http://192.168.0.2/
-#web.friends.3.name=Netbook
-#web.friends.3.link=http://192.168.0.38/
+#web.friends.3.name=Third Raspberry Pi
+#web.friends.3.link=http://192.168.0.3/
 
 web.page.icon='img/logo.png'
-web.page.menutitle='RPi-Monitor  <sub>('+data.hostname+')</sub>'
-web.page.pagetitle='RPi-Monitor ('+data.hostname+')'
+web.page.menutitle='RPi-Monitor <sub>(' + data.hostname + ')</sub>'
+web.page.pagetitle='RPi-Monitor (' + data.hostname + ')'
 
 web.status.1.name=Raspberry Pi
 #web.status.2.name=Home
@@ -270,44 +263,45 @@
 
 web.addons.1.name=Addons
 web.addons.1.addons=about
-#web.addons.1.name=Shellinabox
-#web.addons.1.addons=shellinabox
 
-#web.addons.2.name=Addons example
-#web.addons.2.addons=example
-#web.addons.2.showTitle=0
+#web.addons.2.name=Shell-in-a-box
+#web.addons.2.addons=shellinabox
 
-#web.addons.3.name=Webcam - Hawkeye
+#web.addons.3.name=Addons Example
+#web.addons.3.addons=example
 #web.addons.3.showTitle=0
-#web.addons.3.addons=custom
-#web.addons.3.url=http://0:8000/
 
-#web.addons.4.name=Custom addons
+#web.addons.4.name=Hawkeye Webcam (https://github.com/ipartola/hawkeye)
 #web.addons.4.addons=custom
 #web.addons.4.showTitle=0
-#web.addons.4.url=/addons/custom/custominfo.html
-
-#web.addons.5.name=Top3
-#web.addons.5.addons=top3
-
-#include=/etc/rpimonitor/template/example.justgage.conf
-#include=/etc/rpimonitor/template/example.badge_and_label.conf
-#include=/etc/rpimonitor/template/example.progressbar.conf
-#include=/etc/rpimonitor/template/example.visibility.conf
-
-include=/etc/rpimonitor/template/version.conf
-include=/etc/rpimonitor/template/uptime.conf
-include=/etc/rpimonitor/template/cpu.conf
-include=/etc/rpimonitor/template/temperature.conf
-include=/etc/rpimonitor/template/memory.conf
-include=/etc/rpimonitor/template/swap.conf
-include=/etc/rpimonitor/template/sdcard.conf
-include=/etc/rpimonitor/template/network.conf
-
-#include=/etc/rpimonitor/template/printer.conf
-#include=/etc/rpimonitor/template/storage.conf
-#include=/etc/rpimonitor/template/services.conf
-#include=/etc/rpimonitor/template/wlan.conf
-#include=/etc/rpimonitor/template/dht11.conf
-
+#web.addons.4.url=http://192.168.0.4:8000/
 
+#web.addons.5.name=Custom addons
+#web.addons.5.addons=custom
+#web.addons.5.showTitle=0
+#web.addons.5.url=/addons/custom/custominfo.html
+
+#web.addons.6.name=Top3
+#web.addons.6.addons=top3
+
+# Usage examples:
+#include=/etc/rpimonitord.conf.d/example.justgage.conf
+#include=/etc/rpimonitord.conf.d/example.badge_and_label.conf
+#include=/etc/rpimonitord.conf.d/example.progressbar.conf
+#include=/etc/rpimonitord.conf.d/example.visibility.conf
+
+include=/etc/rpimonitord.conf.d/version.conf
+include=/etc/rpimonitord.conf.d/uptime.conf
+include=/etc/rpimonitord.conf.d/cpu.conf
+include=/etc/rpimonitord.conf.d/temperature.conf
+include=/etc/rpimonitord.conf.d/memory.conf
+include=/etc/rpimonitord.conf.d/swap.conf
+include=/etc/rpimonitord.conf.d/sdcard.conf
+include=/etc/rpimonitord.conf.d/network.conf
+
+# Further real-world examples:
+#include=/etc/rpimonitord.conf.d/printer.conf
+#include=/etc/rpimonitord.conf.d/storage.conf
+#include=/etc/rpimonitord.conf.d/services.conf
+#include=/etc/rpimonitord.conf.d/wlan.conf
+#include=/etc/rpimonitord.conf.d/dht11.conf
